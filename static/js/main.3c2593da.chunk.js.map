{"version":3,"sources":["MarkdownUtil.tsx","components/Menu.tsx","components/ContactPane.tsx","util/Util.tsx","components/NavBar.tsx","pages/ContentPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["mdComps","code","node","inline","className","children","props","language","String","replace","style","androidstudio","content","makeLinkSafe","str","replaceAll","toLowerCase","sectionLinkMap","dict","Object","keys","key","Menu","section","headerList","useState","active","setActive","recalc","onScroll","elems","document","getElementsByTagName","currTop","i","length","elem","text","textContent","includes","getClientRects","y","useEffect","observer","MutationObserver","observe","getElementById","childList","subtree","window","addEventListener","disconnect","removeEventListener","map","thisSection","to","header","id","onClick","event","preventDefault","scrollIntoView","behavior","block","fontWeight","ContactPane","whiteFilter","filter","NavBar","href","src","alt","marginRight","ContentPage","linkSafe","page","useParams","markdown","setMarkdown","fetch","then","res","rehypePlugins","rehypeRaw","remarkPlugins","remarkGfm","components","App","history","History","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3c2593da.chunk.js","sourcesContent":["import SyntaxHighlighter from \"react-syntax-highlighter\";\r\nimport {androidstudio} from \"react-syntax-highlighter/dist/esm/styles/hljs\";\r\nimport React from \"react\";\r\n\r\nexport const mdComps = {\r\n    // @ts-ignore\r\n    code({node, inline, className, children, ...props}) {\r\n        // @ts-ignore\r\n        const language = (()=>{\r\n            switch (className) {\r\n                case 'language-cs':\r\n                    return 'csharp';\r\n                case 'language-css':\r\n                    return 'CSS';\r\n                case 'language-html':\r\n                    return 'html';\r\n\r\n                default:\r\n                    return '';\r\n            }\r\n        })();\r\n        return !inline && language !== '' ? (\r\n            <SyntaxHighlighter\r\n                children={String(children).replace(/\\n$/, '')}\r\n                style={androidstudio}\r\n                className='CodeBlock'\r\n                language={language}\r\n            />\r\n        ) : (\r\n            <code className='InlineCode' {...props}>\r\n                {children}\r\n            </code>\r\n        )\r\n    }\r\n};\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst content: {[key: string]: string[]} = {\r\n    'MonoGameHtml': [\r\n        'What is it?'\r\n    ],\r\n    'Getting Started': [\r\n        'Setup'\r\n    ],\r\n    'Docs': [\r\n        'The Basics',\r\n        'monoHTML Syntax',\r\n        'Components',\r\n        'Writing Components',\r\n        'Using Components',\r\n        'Component Parameters',\r\n        'Dynamic vs. Static Nodes',\r\n        'Using Outside Data/Functionality',\r\n        'State',\r\n    ],\r\n    'Styling Docs': [\r\n        'The Basics',\r\n        'Fonts',\r\n        'Currently-Implemented Style Attributes',\r\n    ]\r\n};\r\n\r\nconst makeLinkSafe = (str: string) => {\r\n    return str.replaceAll(' ', '_').toLowerCase();\r\n}\r\n\r\nconst sectionLinkMap = (()=>{\r\n    const dict: {[key: string]: string} = {};\r\n    for (const key of Object.keys(content)) {\r\n        dict[makeLinkSafe(key)] = key;\r\n    }\r\n    return dict;\r\n})();\r\n\r\nexport const restringSection = (linkSafe: string) => {\r\n    return sectionLinkMap[linkSafe];\r\n}\r\n\r\n\r\n\r\nexport const Menu: React.FC<{section: string}> = ({section}) => {\r\n\r\n    const headerList = content[section];\r\n\r\n    const [active, setActive] = useState('Fonts');\r\n\r\n    const recalc = () => {\r\n        // TODO:\r\n        //console.log('calc!')\r\n        /*const mdPane = document.getElementById('MarkdownPane');\r\n        if (!mdPane) return;\r\n        const elems = mdPane.getElementsByTagName('h2');\r\n        const newHeaderList: string[] = [];\r\n        console.log(334)\r\n        for (let i = 0; i < elems.length; i++) {\r\n            const elem = elems[i];\r\n            if (elem.textContent) newHeaderList.push(elem.textContent);\r\n            console.log(elem.textContent)\r\n        }\r\n        setHeaderList(newHeaderList);*/\r\n    }\r\n\r\n    const onScroll = () => { // TODO: optimize! only use client rect in recalc, then use scroll.y!!\r\n        //const currY = window.scrollY;\r\n        //console.log(currY)\r\n        const elems = document.getElementsByTagName('h2');\r\n        let currTop = headerList[0];\r\n        for (let i = 0; i < elems.length; i++) {\r\n            const elem = elems[i];\r\n            const text = String(elem.textContent);\r\n\r\n            if (!headerList.includes(text)) continue;\r\n\r\n            if (elem.getClientRects()[0].y <= 200) {\r\n                currTop = text;\r\n            }\r\n        }\r\n        setActive(currTop);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const observer = new MutationObserver(recalc);\r\n        // @ts-ignore\r\n        observer.observe(document.getElementById('root'), {\r\n            childList: true,\r\n            subtree: true,\r\n        });\r\n        window.addEventListener('scroll', onScroll);\r\n\r\n        return () => {\r\n            observer.disconnect();\r\n            window.removeEventListener('scroll', onScroll);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className='MenuWrapper'>\r\n            <div className='Menu'>\r\n                {Object.keys(content).map(thisSection => {\r\n                    if (thisSection === section) {\r\n                        return (\r\n                            <>\r\n                                <Link to={makeLinkSafe(thisSection)}>\r\n                                    <h3>{thisSection}</h3>\r\n                                </Link>\r\n                                <ul>\r\n                                    {headerList.map(header =>\r\n                                        <li key={header} id={`menu-${header}`} onClick={event => {\r\n                                            event.preventDefault();\r\n                                            const elems = document.getElementsByTagName('h2');\r\n                                            for (let i = 0; i < elems.length; i++) {\r\n                                                const elem = elems[i];\r\n                                                if (elem.textContent === header) {\r\n                                                    elem?.scrollIntoView({behavior: 'smooth', block: 'start'});\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        }} style={{fontWeight: active === header ? 'bold' : 'normal'}}>\r\n                                            <p>{header}</p>\r\n                                        </li>\r\n                                    )}\r\n                                </ul>\r\n                            </>\r\n                        );\r\n                    }\r\n                    return (\r\n                        <Link to={makeLinkSafe(thisSection)}>\r\n                            <h3 style={{fontWeight: 'normal'}}>{thisSection}</h3>\r\n                        </Link>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport const ContactPane: React.FC = () => {\r\n    return (\r\n        <div className='ContactPane'>\r\n            <h2>TODO:</h2>\r\n        </div>\r\n    );\r\n}\r\n","export const whiteFilter = {filter: 'brightness(0) invert(1)'};\r\n","import React from \"react\";\r\nimport {whiteFilter} from \"../util/Util\";\r\n\r\nexport const NavBar: React.FC = () => {\r\n    return (\r\n        <div className='NavBar'>\r\n            <div className='NavBarContent'>\r\n                <span className='InlineCenter'>\r\n                    <a href=\"https://www.monogame.net/\">\r\n                        <img src=\"/MonoGameHtmlDocs/images/MonoGameLogo.png\" alt=\"monogame\" className='NavBarLogo'/>\r\n                    </a>\r\n                    <h1>MonoGameHtml</h1>\r\n                </span>\r\n                    <a href=\"https://github.com/TobySalusky/MonoGameHtml\">\r\n                    <span className='InlineCenter'>\r\n                        <h2 style={{marginRight: 10}}>Github</h2>\r\n                        <img src=\"/MonoGameHtmlDocs/images/GithubLogo.png\" alt=\"github\" className='NavBarLogo' style={whiteFilter}/>\r\n                    </span>\r\n                    </a>\r\n\r\n                </div>\r\n        </div>\r\n    );\r\n}\r\n","import ReactMarkdown from \"react-markdown\";\r\nimport rehypeRaw from \"rehype-raw\";\r\nimport {mdComps} from \"../MarkdownUtil\";\r\nimport {Menu, restringSection} from \"../components/Menu\";\r\nimport {ContactPane} from \"../components/ContactPane\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport remarkGfm from 'remark-gfm'\r\nimport {NavBar} from \"../components/NavBar\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\nexport const ContentPage: React.FC = () => {\r\n\r\n    const {page} = useParams<{page: string}>();\r\n\r\n    const [markdown, setMarkdown] = useState<string>('awaiting content...');\r\n    const [section, setSection] = useState<string>('');\r\n\r\n\r\n    // eslint-disable-next-line no-restricted-globals\r\n    /*const path = location.pathname;\r\n    const startWith = '/MonoGameHtmlDocs/';\r\n    const newSection = path.substr(path.indexOf(startWith) + startWith.length);\r\n    if (newSection !== section) {\r\n        setSection(newSection);\r\n        window.scrollTo(0, 0);\r\n    }*/\r\n\r\n    useEffect(()=> {\r\n        fetch(`/MonoGameHtmlDocs/markdown/${page}.md`).then(res => res.text()).then(text => setMarkdown(text));\r\n    }, [page])\r\n\r\n    return (\r\n        <div className='App'>\r\n            <NavBar/>\r\n            <span className='MarkdownAndMenuWrapper'>\r\n                <div className='MarkdownPane' id='MarkdownPane'>\r\n                    <ReactMarkdown rehypePlugins={[rehypeRaw]} remarkPlugins={[remarkGfm]}\r\n                        // @ts-ignore\r\n                                   components={mdComps}\r\n                    >\r\n                        {markdown}\r\n                    </ReactMarkdown>\r\n                </div>\r\n                <Menu section={restringSection(page)}/>\r\n            </span>\r\n            <ContactPane/>\r\n        </div>\r\n    );\r\n}\r\n","import './App.css';\r\n// @ts-ignore\r\nimport rehypeRaw from 'rehype-raw'\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport {ContentPage} from \"./pages/ContentPage\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        // @ts-ignore\r\n        <Router history={History}>\r\n            <Switch>\r\n                <Route path ='/MonoGameHtmlDocs/:page' component={ContentPage}/>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}