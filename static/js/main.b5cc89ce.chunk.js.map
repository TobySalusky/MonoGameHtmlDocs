{"version":3,"sources":["markdown/docs.md","MarkdownUtil.tsx","components/ContactPane.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["mdComps","code","node","inline","className","children","props","language","String","replace","style","androidstudio","ContactPane","App","useState","markdown","setMarkdown","fetch","mdFile","then","res","text","rehypePlugins","rehypeRaw","components","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAAe,MAA0B,gC,gDCI5BA,EAAU,CAEnBC,KAFmB,YAEiC,EAA9CC,KAA+C,IAAzCC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,SAAaC,EAAQ,wDAE1CC,EAAY,WACd,OAAQH,GACJ,IAAK,cACD,MAAO,SACX,IAAK,eACD,MAAO,MACX,QACI,MAAO,IAPD,GAUlB,OAAQD,GAAuB,KAAbI,EAQd,8CAAMH,UAAU,cAAiBE,GAAjC,aACKD,KARL,cAAC,IAAD,CACIA,SAAUG,OAAOH,GAAUI,QAAQ,MAAO,IAC1CC,MAAOC,IACPP,UAAU,YACVG,SAAUA,MCrBbK,EAAwB,WACjC,OACI,qBAAKR,UAAU,cAAf,SACI,0CCyBGS,MAlBf,WAAgB,IAAD,EACqBC,mBAAiB,uBADtC,mBACJC,EADI,KACMC,EADN,KAGX,OADAC,MAAMC,GAAQC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAE,GAAI,OAAIL,EAAYK,MAE3D,sBAAKjB,UAAU,MAAf,UACI,qBAAKA,UAAU,eAAf,SACI,cAAC,IAAD,CAAekB,cAAe,CAACC,KAE3BC,WAAYxB,EAFhB,SAIKe,MAGT,cAAC,EAAD,QCXGU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.b5cc89ce.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/docs.4dcba3c2.md\";","import SyntaxHighlighter from \"react-syntax-highlighter\";\r\nimport {androidstudio} from \"react-syntax-highlighter/dist/esm/styles/hljs\";\r\nimport React from \"react\";\r\n\r\nexport const mdComps = {\r\n    // @ts-ignore\r\n    code({node, inline, className, children, ...props}) {\r\n        // @ts-ignore\r\n        const language = (()=>{\r\n            switch (className) {\r\n                case 'language-cs':\r\n                    return 'csharp';\r\n                case 'language-css':\r\n                    return 'CSS';\r\n                default:\r\n                    return '';\r\n            }\r\n        })();\r\n        return !inline && language !== '' ? (\r\n            <SyntaxHighlighter\r\n                children={String(children).replace(/\\n$/, '')}\r\n                style={androidstudio}\r\n                className='CodeBlock'\r\n                language={language}\r\n            />\r\n        ) : (\r\n            <code className='InlineCode' {...props}>\r\n                {children}\r\n            </code>\r\n        )\r\n    }\r\n};\r\n","import React from \"react\";\r\n\r\nexport const ContactPane: React.FC = () => {\r\n    return (\r\n        <div className='ContactPane'>\r\n            <h2>TODO:</h2>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport ReactMarkdown from 'react-markdown'\n// @ts-ignore\nimport mdFile from './markdown/docs.md';\n// @ts-ignore\nimport rehypeRaw from 'rehype-raw'\nimport {mdComps} from \"./MarkdownUtil\";\nimport {ContactPane} from \"./components/ContactPane\";\nimport {NavBar} from \"./components/NavBar\";\nimport {Menu} from \"./components/Menu\";\n\nfunction App() {\n    const [markdown, setMarkdown] = useState<string>('awaiting content...');\n    fetch(mdFile).then(res => res.text()).then(text => setMarkdown(text));\n    return (\n        <div className='App'>\n            <div className='MarkdownPane'>\n                <ReactMarkdown rehypePlugins={[rehypeRaw]}\n                    // @ts-ignore\n                    components={mdComps}\n                >\n                    {markdown}\n                </ReactMarkdown>\n            </div>\n            <ContactPane/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}